{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/component-emitter/index.js","unrest.min.js","node_modules/reduce-component/index.js","node_modules/superagent/lib/client.js","src/database.js","src/main.js","src/request.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","Emitter","obj","mixin","key","prototype","on","addEventListener","event","fn","this","_callbacks","push","once","self","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","callbacks","cb","splice","emit","args","slice","len","listeners","hasListeners",2,"arr","initial","idx","curr",3,"noop","isHost","str","toString","isObject","Object","serialize","pairs","pushEncodedKeyValuePair","join","val","Array","isArray","forEach","v","encodeURIComponent","parseString","parts","pair","split","decodeURIComponent","parseHeader","index","line","field","lines","fields","pop","indexOf","toLowerCase","trim","type","shift","params","reduce","Response","req","options","xhr","text","method","responseType","responseText","statusText","setStatusProperties","status","header","headers","getAllResponseHeaders","getResponseHeader","setHeaderProperties","body","parseBody","response","Request","url","_query","_header","err","res","parse","original","callback","new_err","request","end","del","root","window","getXHR","XMLHttpRequest","location","protocol","ActiveXObject","replace","serializeObject","types","html","json","xml","urlencoded","form","form-data","application/x-www-form-urlencoded","application/json","JSON","stringify","get","ct","statusCode","statusType","info","ok","clientError","serverError","error","toError","accepted","noContent","badRequest","unauthorized","notAcceptable","notFound","forbidden","msg","use","timeout","ms","_timeout","clearTimeout","_timer","abort","aborted","set","unset","getHeader","_parser","accept","auth","user","pass","btoa","query","name","_formData","FormData","append","attach","file","filename","send","data","_data","_callback","crossDomainError","crossDomain","timeoutError","withCredentials","_withCredentials","onreadystatechange","readyState","timedout","handleProgress","total","percent","loaded","onprogress","upload","setTimeout","open","contentType","setRequestHeader","then","fulfill","reject","head","patch","post","put","emitter",4,"_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","protoProps","staticProps","Database","endsWith","_database","table","Table","x","y","database","value","id","fetch","object","save","remove","./request",5,"db","./database","superagent",6,"jsonify","agent","handleResponses","CACHE_KEY","cache","localStorage","getItem","time","Date","onSuccess","removeItem","onError","setItem","lifetime","undefined","Id"],"mappings":"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","file":"unrest.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n\n},{}],2:[function(require,module,exports){\n\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};\n},{}],3:[function(require,module,exports){\n/**\n * Module dependencies.\n */\n\nvar Emitter = require('emitter');\nvar reduce = require('reduce');\n\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  root = this;\n}\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pushEncodedKeyValuePair(pairs, key, obj[key]);\n        }\n      }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (Array.isArray(val)) {\n    return val.forEach(function(v) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    });\n  }\n  pairs.push(encodeURIComponent(key)\n    + '=' + encodeURIComponent(val));\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text ? this.text : this.xhr.response)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = this.statusCode = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    if (err) {\n      return self.callback(err, res);\n    }\n\n    if (res.status >= 200 && res.status < 300) {\n      return self.callback(err, res);\n    }\n\n    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n    new_err.original = err;\n    new_err.response = res;\n    new_err.status = res.status;\n\n    self.callback(new_err, res);\n  });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n  fn(this);\n  return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Force given parser\n *\n * Sets the body parser no matter type.\n *\n * @param {Function}\n * @api public\n */\n\nRequest.prototype.parse = function(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n  if (!this._formData) this._formData = new root.FormData();\n  this._formData.append(name, val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  if (!this._formData) this._formData = new root.FormData();\n  this._formData.append(field, file, filename);\n  return this;\n};\n\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type');\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || isHost(data)) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n  err.crossDomain = true;\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (0 == status) {\n      if (self.timedout) return self.timeoutError();\n      if (self.aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(e){\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch(e) {\n    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  xhr.open(this.method, this.url, true);\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var contentType = this.getHeader('Content-Type');\n    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n/**\n * Faux promise support\n *\n * @param {Function} fulfill\n * @param {Function} reject\n * @return {Request}\n */\n\nRequest.prototype.then = function (fulfill, reject) {\n  return this.end(function(err, res) {\n    err ? reject(err) : fulfill(res);\n  });\n}\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nfunction del(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest.del = del;\nrequest.delete = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;\n\n},{\"emitter\":1,\"reduce\":2}],4:[function(require,module,exports){\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Request = require('./request');\n\nmodule.exports = function Database(name) {\n  _classCallCheck(this, Database);\n\n  this.url = name || '/api/';\n  if (!this.url.endsWith('/')) {\n    this.url += '/';\n  }\n  var self = this;\n  var _database = function _database(table) {\n    return new Table(self, table);\n  };\n  // `public` functions\n  _database.x = 5;\n  _database.y = function () {};\n  return _database;\n};\n\nvar Table = (function () {\n  function Table(database, table) {\n    _classCallCheck(this, Table);\n\n    this._database = database;\n    this.url = database.url + table;\n    this.name = table;\n  }\n\n  _createClass(Table, [{\n    key: 'query',\n    value: function query(options) {\n      return new Request(this).query(options);\n    }\n  }, {\n    key: 'fetch',\n    value: function fetch(id) {\n      return new Request(this).fetch(id);\n    }\n  }, {\n    key: 'save',\n    value: function save(object) {\n      return new Request(this).save(object);\n    }\n  }, {\n    key: 'remove',\n    value: function remove(obj) {\n      return new Request(this).remove(obj);\n    }\n  }]);\n\n  return Table;\n})();\n\n},{\"./request\":6}],5:[function(require,module,exports){\n'use strict';\n\n// The Export Module\n\n(function (exports) {\n  exports.db = require('./database');\n  exports.request = require('superagent');\n})(typeof window !== 'undefined' ? window['dsbn'] = {} : module.exports);\n\n},{\"./database\":4,\"superagent\":3}],6:[function(require,module,exports){\n'use strict';\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global localStorage */\nvar xhr = require('superagent');\n\nfunction jsonify(agent) {\n  return agent.type('application/json').accept('json');\n}\n\nfunction handleResponses(request) {\n  request.status = 'pending';\n  var method = request.agent.method;\n  var url = request.agent.url;\n  var CACHE_KEY = 'unrest-' + method + '-' + url;\n\n  // //\n  // Perform Cache\n  if (request.cache) {\n    var cache = JSON.parse(localStorage.getItem(CACHE_KEY));\n\n    if (cache) {\n      // if the cache exists and isn't old\n      if (cache.time && cache.time > +new Date() - request.cache) {\n        request.onSuccess.forEach(function (cb) {\n          cb(cache.data, true);\n        });\n      } else {\n        localStorage.removeItem(CACHE_KEY);\n      }\n    }\n  }\n\n  // //\n  // Handle Response\n  request.agent.end(function (err, res) {\n    request.status = 'resolved';\n    if (err) {\n      // on error\n      request.error = err;\n      request.onError.forEach(function (cb) {\n        cb(err);\n      });\n    } else {\n      // on success\n      request.data = res.body;\n      if (request.cache) {\n        localStorage.setItem(CACHE_KEY, JSON.stringify({ time: +new Date(), data: request.data }));\n      }\n      request.onSuccess.forEach(function (cb) {\n        cb(res.body);\n      });\n    }\n  });\n}\n\nmodule.exports = (function () {\n  function Request(table) {\n    _classCallCheck(this, Request);\n\n    this.table = table;\n    this.status = 'idle';\n    this.onSuccess = [];\n    this.onError = [];\n  }\n\n  _createClass(Request, [{\n    key: 'cacheable',\n    value: function cacheable() {\n      var lifetime = arguments.length <= 0 || arguments[0] === undefined ? 1000 : arguments[0];\n\n      this.cache = lifetime;\n      return this;\n    }\n\n    // QUERY GET /table/\n    // Returns a list.\n\n  }, {\n    key: 'query',\n    value: function query(options) {\n      this.agent = xhr.get(this.table.url).query(options);\n      jsonify(this.agent);\n      return this;\n    }\n  }, {\n    key: 'fetch',\n    value: function fetch(id, options) {\n      this.agent = xhr.get(this.table.url + '/' + id.toString()).query(options);\n      jsonify(this.agent);\n      return this;\n    }\n  }, {\n    key: 'save',\n    value: function save(obj) {\n      var r = null;\n      if (!obj.Id || obj.Id === 0) {\n        r = xhr.post(this.table.url);\n      } else {\n        r = xhr.put(this.table.url + '/' + obj.Id);\n      }\n      this.agent = r.send(obj);\n      jsonify(this.agent);\n      return this;\n    }\n  }, {\n    key: 'remove',\n    value: function remove(Id) {\n      this.agent = xhr.del(this.table.url + '/' + Id);\n      jsonify(this.agent);\n      return this;\n    }\n  }, {\n    key: 'then',\n    value: function then(cb) {\n      if (this.status === 'resolved' && !this.error) {\n        cb(this.data);\n      } else {\n        this.onSuccess.push(cb);\n      }\n      if (this.status === 'idle') handleResponses(this);\n      return this;\n    }\n  }, {\n    key: 'catch',\n    value: function _catch(cb) {\n      if (this.status === 'resolved' && this.error) {\n        cb(this.error);\n      } else {\n        this.onError.push(cb);\n      }\n      if (this.status === 'idle') handleResponses(this);\n      return this;\n    }\n  }]);\n\n  return Request;\n})();\n\n},{\"superagent\":3}]},{},[5])\n\n","\n/**\n * Reduce `arr` with `fn`.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @param {Mixed} initial\n *\n * TODO: combatible error handling?\n */\n\nmodule.exports = function(arr, fn, initial){  \n  var idx = 0;\n  var len = arr.length;\n  var curr = arguments.length == 3\n    ? initial\n    : arr[idx++];\n\n  while (idx < len) {\n    curr = fn.call(null, curr, arr[idx], ++idx, arr);\n  }\n  \n  return curr;\n};","/**\n * Module dependencies.\n */\n\nvar Emitter = require('emitter');\nvar reduce = require('reduce');\n\n/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  root = this;\n}\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * TODO: future proof, move to compoent land\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isHost(obj) {\n  var str = {}.toString.call(obj);\n\n  switch (str) {\n    case '[object File]':\n    case '[object Blob]':\n    case '[object FormData]':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  return false;\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Check if `obj` is an object.\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\n\nfunction isObject(obj) {\n  return obj === Object(obj);\n}\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    if (null != obj[key]) {\n      pushEncodedKeyValuePair(pairs, key, obj[key]);\n        }\n      }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (Array.isArray(val)) {\n    return val.forEach(function(v) {\n      pushEncodedKeyValuePair(pairs, key, v);\n    });\n  }\n  pairs.push(encodeURIComponent(key)\n    + '=' + encodeURIComponent(val));\n}\n\n/**\n * Expose serialization method.\n */\n\n request.serializeObject = serialize;\n\n /**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var parts;\n  var pair;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    parts = pair.split('=');\n    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'application/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\n request.serialize = {\n   'application/x-www-form-urlencoded': serialize,\n   'application/json': JSON.stringify\n };\n\n /**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  lines.pop(); // trailing CRLF\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction type(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction params(str){\n  return reduce(str.split(/ *; */), function(obj, str){\n    var parts = str.split(/ *= */)\n      , key = parts.shift()\n      , val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req, options) {\n  options = options || {};\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  this.setStatusProperties(this.xhr.status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this.setHeaderProperties(this.header);\n  this.body = this.req.method != 'HEAD'\n    ? this.parseBody(this.text ? this.text : this.xhr.response)\n    : null;\n}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function(field){\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponse.prototype.setHeaderProperties = function(header){\n  // content-type\n  var ct = this.header['content-type'] || '';\n  this.type = type(ct);\n\n  // params\n  var obj = params(ct);\n  for (var key in obj) this[key] = obj[key];\n};\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype.parseBody = function(str){\n  var parse = request.parse[this.type];\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponse.prototype.setStatusProperties = function(status){\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n\n  var type = status / 100 | 0;\n\n  // status / class\n  this.status = this.statusCode = status;\n  this.statusType = type;\n\n  // basics\n  this.info = 1 == type;\n  this.ok = 2 == type;\n  this.clientError = 4 == type;\n  this.serverError = 5 == type;\n  this.error = (4 == type || 5 == type)\n    ? this.toError()\n    : false;\n\n  // sugar\n  this.accepted = 202 == status;\n  this.noContent = 204 == status;\n  this.badRequest = 400 == status;\n  this.unauthorized = 401 == status;\n  this.notAcceptable = 406 == status;\n  this.notFound = 404 == status;\n  this.forbidden = 403 == status;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  Emitter.call(this);\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {};\n  this._header = {};\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    if (err) {\n      return self.callback(err, res);\n    }\n\n    if (res.status >= 200 && res.status < 300) {\n      return self.callback(err, res);\n    }\n\n    var new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n    new_err.original = err;\n    new_err.response = res;\n    new_err.status = res.status;\n\n    self.callback(new_err, res);\n  });\n}\n\n/**\n * Mixin `Emitter`.\n */\n\nEmitter(Request.prototype);\n\n/**\n * Allow for extension\n */\n\nRequest.prototype.use = function(fn) {\n  fn(this);\n  return this;\n}\n\n/**\n * Set timeout to `ms`.\n *\n * @param {Number} ms\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.timeout = function(ms){\n  this._timeout = ms;\n  return this;\n};\n\n/**\n * Clear previous timeout.\n *\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.clearTimeout = function(){\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n};\n\n/**\n * Abort the request, and clear potential timeout.\n *\n * @return {Request}\n * @api public\n */\n\nRequest.prototype.abort = function(){\n  if (this.aborted) return;\n  this.aborted = true;\n  this.xhr.abort();\n  this.clearTimeout();\n  this.emit('abort');\n  return this;\n};\n\n/**\n * Set header `field` to `val`, or multiple fields with one object.\n *\n * Examples:\n *\n *      req.get('/')\n *        .set('Accept', 'application/json')\n *        .set('X-API-Key', 'foobar')\n *        .end(callback);\n *\n *      req.get('/')\n *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })\n *        .end(callback);\n *\n * @param {String|Object} field\n * @param {String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.set = function(field, val){\n  if (isObject(field)) {\n    for (var key in field) {\n      this.set(key, field[key]);\n    }\n    return this;\n  }\n  this._header[field.toLowerCase()] = val;\n  this.header[field] = val;\n  return this;\n};\n\n/**\n * Remove header `field`.\n *\n * Example:\n *\n *      req.get('/')\n *        .unset('User-Agent')\n *        .end(callback);\n *\n * @param {String} field\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.unset = function(field){\n  delete this._header[field.toLowerCase()];\n  delete this.header[field];\n  return this;\n};\n\n/**\n * Get case-insensitive header `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api private\n */\n\nRequest.prototype.getHeader = function(field){\n  return this._header[field.toLowerCase()];\n};\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Force given parser\n *\n * Sets the body parser no matter type.\n *\n * @param {Function}\n * @api public\n */\n\nRequest.prototype.parse = function(fn){\n  this._parser = fn;\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} pass\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass){\n  var str = btoa(user + ':' + pass);\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n};\n\n/**\n* Add query-string `val`.\n*\n* Examples:\n*\n*   request.get('/shoes')\n*     .query('size=10')\n*     .query({ color: 'blue' })\n*\n* @param {Object|String} val\n* @return {Request} for chaining\n* @api public\n*/\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Write the field `name` and `val` for \"multipart/form-data\"\n * request bodies.\n *\n * ``` js\n * request.post('/upload')\n *   .field('foo', 'bar')\n *   .end(callback);\n * ```\n *\n * @param {String} name\n * @param {String|Blob|File} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.field = function(name, val){\n  if (!this._formData) this._formData = new root.FormData();\n  this._formData.append(name, val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `filename`.\n *\n * ``` js\n * request.post('/upload')\n *   .attach(new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String} filename\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, filename){\n  if (!this._formData) this._formData = new root.FormData();\n  this._formData.append(field, file, filename);\n  return this;\n};\n\n/**\n * Send `data`, defaulting the `.type()` to \"json\" when\n * an object is given.\n *\n * Examples:\n *\n *       // querystring\n *       request.get('/search')\n *         .end(callback)\n *\n *       // multiple data \"writes\"\n *       request.get('/search')\n *         .send({ search: 'query' })\n *         .send({ range: '1..5' })\n *         .send({ order: 'desc' })\n *         .end(callback)\n *\n *       // manual json\n *       request.post('/user')\n *         .type('json')\n *         .send('{\"name\":\"tj\"}')\n *         .end(callback)\n *\n *       // auto json\n *       request.post('/user')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // manual x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send('name=tj')\n *         .end(callback)\n *\n *       // auto x-www-form-urlencoded\n *       request.post('/user')\n *         .type('form')\n *         .send({ name: 'tj' })\n *         .end(callback)\n *\n *       // defaults to x-www-form-urlencoded\n  *      request.post('/user')\n  *        .send('name=tobi')\n  *        .send('species=ferret')\n  *        .end(callback)\n *\n * @param {String|Object} data\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.send = function(data){\n  var obj = isObject(data);\n  var type = this.getHeader('Content-Type');\n\n  // merge\n  if (obj && isObject(this._data)) {\n    for (var key in data) {\n      this._data[key] = data[key];\n    }\n  } else if ('string' == typeof data) {\n    if (!type) this.type('form');\n    type = this.getHeader('Content-Type');\n    if ('application/x-www-form-urlencoded' == type) {\n      this._data = this._data\n        ? this._data + '&' + data\n        : data;\n    } else {\n      this._data = (this._data || '') + data;\n    }\n  } else {\n    this._data = data;\n  }\n\n  if (!obj || isHost(data)) return this;\n  if (!type) this.type('json');\n  return this;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  var fn = this._callback;\n  this.clearTimeout();\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');\n  err.crossDomain = true;\n  this.callback(err);\n};\n\n/**\n * Invoke callback with timeout error.\n *\n * @api private\n */\n\nRequest.prototype.timeoutError = function(){\n  var timeout = this._timeout;\n  var err = new Error('timeout of ' + timeout + 'ms exceeded');\n  err.timeout = timeout;\n  this.callback(err);\n};\n\n/**\n * Enable transmission of cookies with x-domain requests.\n *\n * Note that for this to work the origin must not be\n * using \"Access-Control-Allow-Origin\" with a wildcard,\n * and also must set \"Access-Control-Allow-Credentials\"\n * to \"true\".\n *\n * @api public\n */\n\nRequest.prototype.withCredentials = function(){\n  this._withCredentials = true;\n  return this;\n};\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  var self = this;\n  var xhr = this.xhr = request.getXHR();\n  var query = this._query.join('&');\n  var timeout = this._timeout;\n  var data = this._formData || this._data;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // state change\n  xhr.onreadystatechange = function(){\n    if (4 != xhr.readyState) return;\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (0 == status) {\n      if (self.timedout) return self.timeoutError();\n      if (self.aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(e){\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    xhr.onprogress = handleProgress;\n  }\n  try {\n    if (xhr.upload && this.hasListeners('progress')) {\n      xhr.upload.onprogress = handleProgress;\n    }\n  } catch(e) {\n    // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n    // Reported here:\n    // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n  }\n\n  // timeout\n  if (timeout && !this._timer) {\n    this._timer = setTimeout(function(){\n      self.timedout = true;\n      self.abort();\n    }, timeout);\n  }\n\n  // querystring\n  if (query) {\n    query = request.serializeObject(query);\n    this.url += ~this.url.indexOf('?')\n      ? '&' + query\n      : '?' + query;\n  }\n\n  // initiate request\n  xhr.open(this.method, this.url, true);\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {\n    // serialize stuff\n    var contentType = this.getHeader('Content-Type');\n    var serialize = this._parser || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n    xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\n/**\n * Faux promise support\n *\n * @param {Function} fulfill\n * @param {Function} reject\n * @return {Request}\n */\n\nRequest.prototype.then = function (fulfill, reject) {\n  return this.end(function(err, res) {\n    err ? reject(err) : fulfill(res);\n  });\n}\n\n/**\n * Expose `Request`.\n */\n\nrequest.Request = Request;\n\n/**\n * Issue a request:\n *\n * Examples:\n *\n *    request('GET', '/users').end(callback)\n *    request('/users').end(callback)\n *    request('/users', callback)\n *\n * @param {String} method\n * @param {String|Function} url or callback\n * @return {Request}\n * @api public\n */\n\nfunction request(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new Request('GET', method);\n  }\n\n  return new Request(method, url);\n}\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn){\n  var req = request('GET', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn){\n  var req = request('HEAD', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nfunction del(url, fn){\n  var req = request('DELETE', url);\n  if (fn) req.end(fn);\n  return req;\n};\n\nrequest.del = del;\nrequest.delete = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn){\n  var req = request('PATCH', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} data\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn){\n  var req = request('POST', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} data or fn\n * @param {Function} fn\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn){\n  var req = request('PUT', url);\n  if ('function' == typeof data) fn = data, data = null;\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * Expose `request`.\n */\n\nmodule.exports = request;\n","'use strict';\r\n\r\nvar Request = require('./request');\r\n\r\nmodule.exports = class Database {\r\n  constructor (name) {\r\n    this.url = name || '/api/';\r\n    if (!this.url.endsWith('/')) {\r\n      this.url += '/';\r\n    }\r\n    var self = this;\r\n    var _database = function (table) {\r\n      return new Table(self, table);\r\n    };\r\n    // `public` functions\r\n    _database.x = 5;\r\n    _database.y = function () {};\r\n    return _database;\r\n  }\r\n};\r\n\r\nclass Table {\r\n    constructor (database, table) {\r\n      this._database = database;\r\n      this.url = database.url + table;\r\n      this.name = table;\r\n    }\r\n\r\n    query (options) {\r\n      return new Request(this).query(options);\r\n    }\r\n\r\n    fetch (id) {\r\n      return new Request(this).fetch(id);\r\n    }\r\n\r\n    save (object) {\r\n      return new Request(this).save(object);\r\n    }\r\n\r\n    remove (obj) {\r\n      return new Request(this).remove(obj);\r\n    }\r\n}\r\n","// The Export Module\r\n\r\n(function (exports) {\r\n  exports.db = require('./database');\r\n  exports.request = require('superagent');\r\n})(typeof window !== 'undefined' ? window['dsbn'] = {} : module.exports);\r\n","/* global localStorage */\r\nvar xhr = require('superagent');\r\n\r\nfunction jsonify (agent) {\r\n  return agent.type('application/json')\r\n    .accept('json');\r\n}\r\n\r\nfunction handleResponses (request) {\r\n  request.status = 'pending';\r\n  var method = request.agent.method;\r\n  var url = request.agent.url;\r\n  const CACHE_KEY = 'unrest-' + method + '-' + url;\r\n\r\n  // //\r\n  // Perform Cache\r\n  if (request.cache) {\r\n    var cache = JSON.parse(localStorage.getItem(CACHE_KEY));\r\n\r\n    if (cache) {\r\n      // if the cache exists and isn't old\r\n      if (cache.time && cache.time > +(new Date()) - request.cache) {\r\n        request.onSuccess.forEach(function (cb) {\r\n          cb(cache.data, true);\r\n        });\r\n      } else {\r\n        localStorage.removeItem(CACHE_KEY);\r\n      }\r\n    }\r\n  }\r\n\r\n  // //\r\n  // Handle Response\r\n  request.agent.end(function (err, res) {\r\n    request.status = 'resolved';\r\n    if (err) { // on error\r\n      request.error = err;\r\n      request.onError.forEach(function (cb) {\r\n        cb(err);\r\n      });\r\n    } else { // on success\r\n      request.data = res.body;\r\n      if (request.cache) {\r\n        localStorage.setItem(CACHE_KEY, JSON.stringify(\r\n          { time: +new Date(), data: request.data }\r\n        ));\r\n      }\r\n      request.onSuccess.forEach(function (cb) {\r\n        cb(res.body);\r\n      });\r\n    }\r\n  });\r\n}\r\n\r\nmodule.exports = class Request {\r\n  constructor (table) {\r\n    this.table = table;\r\n    this.status = 'idle';\r\n    this.onSuccess = [];\r\n    this.onError = [];\r\n  }\r\n\r\n  cacheable (lifetime = 1000) {\r\n    this.cache = lifetime;\r\n    return this;\r\n  }\r\n\r\n  // QUERY GET /table/\r\n  // Returns a list.\r\n  query (options) {\r\n    this.agent = xhr\r\n      .get(this.table.url)\r\n      .query(options);\r\n    jsonify(this.agent);\r\n    return this;\r\n  }\r\n\r\n  fetch (id, options) {\r\n    this.agent = xhr\r\n      .get(this.table.url + '/' + id.toString())\r\n      .query(options);\r\n    jsonify(this.agent);\r\n    return this;\r\n  }\r\n\r\n  save (obj) {\r\n    var r = null;\r\n    if (!obj.Id || obj.Id === 0) {\r\n      r = xhr.post(this.table.url);\r\n    } else {\r\n      r = xhr.put(this.table.url + '/' + obj.Id);\r\n    }\r\n    this.agent = r.send(obj);\r\n    jsonify(this.agent);\r\n    return this;\r\n  }\r\n\r\n  remove (Id) {\r\n    this.agent = xhr.del(this.table.url + '/' + Id);\r\n    jsonify(this.agent);\r\n    return this;\r\n  }\r\n\r\n  then (cb) {\r\n    if (this.status === 'resolved' && !this.error) {\r\n      cb(this.data);\r\n    } else {\r\n      this.onSuccess.push(cb);\r\n    }\r\n    if (this.status === 'idle') handleResponses(this);\r\n    return this;\r\n  }\r\n\r\n  catch (cb) {\r\n    if (this.status === 'resolved' && this.error) {\r\n      cb(this.error);\r\n    } else {\r\n      this.onError.push(cb);\r\n    }\r\n    if (this.status === 'idle') handleResponses(this);\r\n    return this;\r\n  }\r\n};\r\n"],"sourceRoot":"/source/"}